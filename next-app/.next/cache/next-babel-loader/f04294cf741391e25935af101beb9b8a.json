{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"query{\\n    products(first:2){\\n        nodes {\\n          id\\n          productId\\n          averageRating\\n          slug\\n          description\\n          image {\\n            uri\\n            title\\n            srcSet\\n            sourceUrl\\n          }\\n          name\\n          \\n          \\n        }\\n      }\\n\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from \"../components/Layout\";\nimport fetch from 'isomorphic-unfetch';\nimport client from './../components/ApolloClient'; //import clientConfig from '../client-config';\n\nimport Product from '../components/Product';\nimport gql from 'graphql-tag';\nvar PRODUCT_QERY = gql(_templateObject());\n/**\r\n * index\r\n * @param {*} props \r\n */\n\nvar Index = function Index(props) {\n  console.warn(props);\n  var products = props.products;\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"product-container\"\n  }));\n};\n\nIndex.getInitialProps = function _callee() {\n  var result;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(client.query({\n            query: PRODUCT_QERY\n          }));\n\n        case 2:\n          result = _context.sent;\n          return _context.abrupt(\"return\", {\n            produtcs: result.data.products.nodes\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index; // const res = await fetch( `${clientConfig.siteUrl}/getProducts` );\n//  const producsData = await res.json();\n// return {\n//     products:res\n// }","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/aa/nextjs/next-app/pages/index.js"],"names":["Layout","fetch","client","Product","gql","PRODUCT_QERY","Index","props","console","warn","products","getInitialProps","query","result","produtcs","data","nodes"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,8BAAnB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,YAAY,GAAGD,GAAH,mBAAlB;AAuBA;;;;;AAMA,IAAME,KAAK,GAAG,SAARA,KAAQ,CAAEC,KAAF,EAAY;AACtBC,EAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AADsB,MAEfG,QAFe,GAEHH,KAFG,CAEfG,QAFe;AAItB,SACG,MAAC,MAAD,QACC;AAAK,IAAA,SAAS,EAAC;AAAf,IADD,CADH;AAUH,CAdD;;AAgBAJ,KAAK,CAACK,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAECT,MAAM,CAAEU,KAAR,CAAe;AAAEA,YAAAA,KAAK,EAACP;AAAR,WAAf,CAFD;;AAAA;AAEdQ,UAAAA,MAFc;AAAA,2CAGb;AACHC,YAAAA,QAAQ,EAAED,MAAM,CAACE,IAAP,CAAYL,QAAZ,CAAqBM;AAD5B,WAHa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAWA,eAAeV,KAAf,C,CAEA;AACI;AACA;AACA;AACA","sourcesContent":["import Layout from \"../components/Layout\";\r\nimport fetch from 'isomorphic-unfetch';\r\nimport client from './../components/ApolloClient'\r\n//import clientConfig from '../client-config';\r\nimport Product from '../components/Product';\r\n\r\nimport gql from 'graphql-tag';\r\n\r\nconst PRODUCT_QERY = gql`query{\r\n    products(first:2){\r\n        nodes {\r\n          id\r\n          productId\r\n          averageRating\r\n          slug\r\n          description\r\n          image {\r\n            uri\r\n            title\r\n            srcSet\r\n            sourceUrl\r\n          }\r\n          name\r\n          \r\n          \r\n        }\r\n      }\r\n\r\n}`;\r\n\r\n\r\n/**\r\n * index\r\n * @param {*} props \r\n */\r\n\r\n\r\nconst Index = ( props ) =>{\r\n    console.warn(props);\r\n    const {products} = props ;\r\n\r\n    return (\r\n       <Layout>\r\n        <div className=\"product-container\">\r\n        {/* { products.lenght ? (\r\n             products.map( product =><Product key={product.id} product ={product}/>)\r\n         ) : '' } */}\r\n        </div>\r\n       \r\n       </Layout>\r\n    );\r\n};\r\n\r\nIndex.getInitialProps = async () => {\r\n\r\n    const result = await client .query( { query:PRODUCT_QERY})\r\n    return {\r\n        produtcs: result.data.products.nodes\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nexport default Index;\r\n\r\n// const res = await fetch( `${clientConfig.siteUrl}/getProducts` );\r\n    //  const producsData = await res.json();\r\n    // return {\r\n    //     products:res\r\n    // }"]},"metadata":{},"sourceType":"module"}